"We should probably start with the test cases since it's test driven development."
"Yes, you should. Alright."
"So we gotta..."
"So tests..."
"Okay, so we need to add the tests for, if, um, for the different cases to win, so..."
"Should do... "
"Void, uh, place, assert equals game dot."
"Let's see what we have so far."
"Place mark..."
"Wait, so what exactly are we doing here in the code?"
"So, I think we need to make the tests that, um, the different scenarios in which you could win."
"So and then this would need to go into the tests."
"Okay, I see."
"Um, so the placemark method is putting the X's in specific places."
"And tracking that.  You can't- That there is a spot to put there. But something, um..."
"Does it switch back and forth? We should get it to."
"Do you need any help?"
"Do we need to add the O player?"
"Is that what we need to be doing first, actually?"
"I'm not sure."
"Um, okay."
"Well let's look at the file and see if we have..."
"So if you..."
"Well, I'm looking at the user stories and acceptance criteria and user story one has us write a test for winning vertically."
"Okay, so let's do that first then."
"Okay, so if it's,"
"I'll call it, boop, win vertical."
Um-
"So if we have game dot place."
"Okay, place mark sets"
Zero
"Zero, zero, zero is true"
And...
So-
"Hey, I see what you're doing."
Um,
"One is true."
"And... false."
"Cause place mark returns true if it just got filled, so, I know we need to iterate through the board. We don't want this."
"We want it to do, um, for..."
"We probably need a big method called, like, well, let's just do this first, um-"
"For how we call-"
"I can try if you want."
Okay.
"Let me see."
"I think we can put some assert equals."
Okay.
"Okay, I see what you're doing. That makes more sense."
"Does this make any sense?"
"Yes, this does. That helps a lot."
"Okay, so you're okay. That makes more sense what we're supposed to be doing, um..."
"Should this be true or false on line 33?"
"Um... game dot vertical win.  So that should be..."
"So assert is... assert returns."
"It should be true."
"In this case, so the assert statement should be true, unless. Let's see if it's-"
"Okay, sounds good."
"Hm, row, column. Yeah, it should be true."
"That's all I can think of. Can you drive?"
Yes.
"Okay, um, alrighty, so, so this..."
"Okay, so now we can use that same idea to do a horizontal win test."
"I'm gonna do game dot place."
Mark.
"Uh, zero zero- No that's not right."
"We should add a test on line 27 and line 34"
The-
"Like that?"
"Is that what you mean?"
"Yeah, that works."
Awesome
"Row is..."
"So you wanna go same- Still same row, we want to change the column for the horizontal test."
Actually...
Yeah.
"Okay, I see what you're doing here."
"Okay, so do we have... this does dot vertical win."
"Is that something we have?"
"Or do we need to write that method? And that's part of the-"
"So should we write the tests for these like the method game dot vertical win now do you think?"
"There needs to be more code in the win vertical and win horizontal tests."
"Uh huh."
"Would you like me to give it a shot?"
Yes.
"Okay, so I'm going to work on the vertical test. "
Okay.
"We can add some more code here."
Alright.
"I think maybe..."
"We can, um..."
"We'll just let- we'll just let's see."
"Okay, that makes sense."
"I think this might do the trick. I'm not sure though."
"It looks like it would."
"That tests all the, uh, all the different ways you could win vertically."
"So, we should do the same thing in the one horizontal."
"Okay, good to hear."
"Do you want to do it or should I?"
"Either? Why don't you do it since you already have control?"
"Okay, so there should be some more here."
"Mm hmm, Yep."
"We can um-"
"Does this look like it works?"
"Yes, it does."
Great.
"Actually, I'm a bit stuck now."
"Okay, I can take it over."
"Can you take over?"
Yes.
"Okay, great."
"So now that's checks all the vertical ways to win and all the horizontal ways to end with tests. So..."
"Let's do..."
"We go to the, you can also win on the diagonals. So let's put tests for that, too"
"Okay, sounds good to me."
"What are you thinking here"
"So, if-"
"we need to check the diagonals to, so for, I'm using this same process we use for win horizontal and win vertical."
"And putting the-  but putting the place marks on the diagonals"
So...
"Does that sound right?"
"I think we're on the right track here."
"Forgot an a."
"No, need to do the other part."
So...
"Right here I can..."
"Setup place mark so it needs to be the zero row, but the second column or the two index column, and then first row, that one's the same."
"And then, second index row, and the zero..."
"Yes, and that's... diagonal."
True.
"I think it did."
Awesome.
"What do we need to do now do you think?"
"Let's look at the..."
"We need to make a test for a tie game for user story six. "
"Yes, very true."
"So let's do, we have, uh, check if board is full."
So...
"We can use that method. So we can do..."
"At ties."
"Avoid tie game."
"So we just need to fill up the board so we can do game dot O."
"Place mark..."
Zero...
"We just need to iterate through the whole board putting marks. "
"And so that's the same as the placemark codes from these so we can copy these to be efficient."
"Okay, I see."
Nooo.
"So, we want to-"
"What's going on here exactly?"
"So we're trying to fill up the board for a tie game. "
"So if all of the spots are filled, so I was just copying and pasting from our verta- when vertical placemarks because that's faster for me than typing them all."
Equals-
"Oh, I found a typo."
"Um, equals... game dot, uh, tie win."
"No, just tie when uh, tie comma true."
"Okay. Do you think this will work as a test for tie game?"
"I think there needs to be more code. "
Okay.
"So, let's go to the-"
"I can give it a shot if you'd like."
Alright.
"Have at it. "
"Okay, so we can change this variable here."
"Uh huh."
"I think something like this would help. "
"Mm hmm. Okay."
"Oh true because otherwise it's gonna-"
"What about this?"
"Yes, that makes a lot more sense. That's good."
Awesome.
"Oh, okay. Awesome."
"Alright, do we-"
"Do you want to drive again?"
Sure.
"Let's see what do we need to do now?"
"Okay, so we should- user stories number five is switching between turns."
"So we should do the test for that."
So...
"Let's do that."
"Did we already have a test for that? No, we don't."
"Oh, oops."
"So we want to do one is zero or 'O'."
"And then if they play so game dot place mark."
"We can just have them do it at zero zero."
"And then we want to assert..."
Equals...
"Game... dot current player mark."
"I see."
"Is x..."
"And then we want to do this same process for..."
"The other way."
"Place mark..."
"Do one one so that doesn't interfere with the previous one. "
"I think there is a typo on line 107."
"Yeah. Thank you."
"No problem."
"All right. Do you think this works for switch turns?"
"I'm not sure."
Okay.
"Let's try it out."
Okay.
"What should we do to try it out?"
"We can write the code instead of the tests."
"Okay, that's very true."
So...
Board...
"So we should put these..."
"This is all part of the game."
"Initialize board not board length."
"So we have..."
"I think we should implement the methods from the tests."
"Okay, so we have... vertical."
"Let's do that above the tests."
"So we have... when it's a boolean."
"Vertical win"
"So this is if..."
"So for int i equals zero, i is less than or equal to two"
"Plus plus because we need to iterate through the each row and column."
"So we do that using a nested for loop."
"Does that sound good to you?"
"I think we should move that function to the Tic Tac Toe game file."
Okay.
"After this one."
"So... then how should we do the inside of this?"
"Should we do-"
"Need any help?"
"Yes. What do you think we should do?"
"Okay, let me see."
"I think we can do an if statement here."
"Okay, so if, um..."
So...
"So the first we're going to be at zero zero."
"So if the mark is..."
So...
"We want it to-"
If...
"Oh, yep, that makes sense."
"Does this look good?"
"Yes, this looks good."
Yep.
"Glad to help."
"Okay, so if..."
"So then we need to do... else..."
"Oh, so we don't need the- uh, we don't need this. "
"I'm not sure what to do from here."
"Okay, do you want me to take back over? I have an idea I think."
Sure.
Okay.
"So, there's this..."
"Um, I'm gonna scoot this back over."
"Uh, return true... else..."
"Else if... so we need to probably do a whole bunch of if statements, lemme scoot this over."
"Because it also could be, it could also be a different vertical row"
"So else if..."
"And then let me copy the condition of your if statement."
"But do you want to change this part?"
"What does this code do?"
"So this will, we want to check all of the vertical possibilities. So this is the second column."
"So we're gonna do that for..."
"All the columns."
Alright.
"So, now we're changing the column."
"Um, and then we want to have an else return false."
"In case all of these don't work."
"That everything?"
"I think that's everything for the vertical win we can do the same process for horizontal win."
"Good job."
"So let's... copy this."
"So on to one."
"And then we want to change the- the point it's checking."
"If true, then we wanna have one... zero..."
"One one still, yup."
"And then, one two."
"And, then we wanna have two zero, two one"
"Okay, I see what you're doing here."
"Two two."
"Yup, alright, so that gives us horizontal and vertical win."
"Does this look good to you?"
"Looks good to me."
"Alright, so let's write the method next for, um, diagonal win."
Okay.
"We can kind of, probably do the same thing again, just change the..."
"We don't-"
"There's only two conditions to check for this one."
"So we have zero one, one one, two two."
"And then we have zero two, one one, and then-"
""
"My name's buddy the pair buddy. Are you ready to start?"
"I am, pairbuddy."
"How should we get started?"
"All right, well, first, I should read this task so that I know exactly what I need to do."
"Um, so I need to check if I have won the game. "
"Um, and I basically need to check the current status"
"So, let me- let me check both of these files, and exactly what we're doing."
"user stories..."
"Okay, so it seems that we need to implement, um, a way for us to know if we won or not."
"Um, I believe that's, that's the, that's the whole purpose of the game. we just check if we've won or not."
"Okay, sounds good."
"Let me read through this one more time."
"Vertical, horizontal..."
"I'm going to read this to you, pairbuddy."
"As a user, I want to be able to win by placing the marks in a vertical column, or three marks in a horizontal column or three marks in a diagonal."
"And we also want to check for empty spaces. Because if there's none, then that means it's finished."
"And I want to take turns with my opponents to have multiple players. So we need to be able to switch if we're the circle or the x."
"And then we need to make sure that we're doing test driven development, make sure that the code is working correctly. "
"All right, so it says acceptance criteria, player wins when placing their marks in a horizontal vertical back row. "
"Um, if all spaces are occupied, then no vertical horizontal or diagonal width has been accomplished and the game is tight. So obviously, we need to check if they win."
"So obviously, we need to check if they win. If there's a tie. "
"Or if a space is occupied, you can't put your mark in that spot. So we'll need to have a check for that."
"And then also, once a player places a mark, the game should change to the other players turn."
"Which I believe in this case, we've got to change the current player mark, which is in line 53 of Tic Tac Toe game dot java."
"Um... we'll just need to change the current player mark to the other player."
"So, uh, that seems to be the main idea behind it."
"It says a scenar- oh it gives some examples scenarios."
"So we should be able to test this out."
"There are no spaces left the game is a tie"
"I understand this."
"Okay, what do you want to do first?"
Yeah.
"I believe I want to write the, um, the way that it changes the player mark depending on which person is going."
"So I need to make sure that after we placed one player mark, it changes to the other player mark."
"I'm just reading through this code..."
"Do you want to go first?"
"Um, actually, how about you go first paribuddy?"
"Alright, sounds good."
"Give me a second. I am thinking."
"Of course."
"This give me some time to think myself."
"I think we should add some code that's less for EE (?)"
"Less for EE? I'm sorry, can you repeat that, pairbuddy?"
"I think we should add some code here. Let me see."
"Ah, great, thank you."
"Okay, so I think I got it."
"Alright. What do you have, pairbuddy?"
"Does this work for you?"
"Let me see."
"If current player mark equals zero, then current player mark equals..."
"Yes, that does work."
"This might do the trick. I'm not sure though"
"Well, this takes care of one of our conditions. But we also need to account for the second condition, which is where if the player mark is equal to x, we need to change it to o."
"So we could add an else statement right there and that would work just fine."
"Mind if I give it a shot?"
"Of course, go for it."
"I think this should work."
"Is this good?"
"I don't know if this is correct."
"Um, yeah, there is just one part that I want to fix here. And that's the location of these statements. "
"I think they should go up above the return statements. So right at the very top of this method,"
"Because then it will ensure that we change which, uh, which letter it is before we do any return value."
"Put that at line 48-"
"Mind if you take over?"
"Oh of course, I can take over."
"Now, we do this."
"We're going to take this and put it right up at line 48."
"I mean formatted correctly, alright, there we go. "
"And this also just needs a closing brackets right there."
"And this should work where it places the mark. And then if according to whether they say your mark is zero or x, it will change the corresponding other mark."
"Um, and then, it will perform it's-"
"Oh, you know what? I've encounted a problem, pairbuddy."
"Because this logic right here, uses the current player mark to place on the board which means that we need to have this- these- this logic occur here."
"The current player mark is placed in both cases, so-"
"Good idea."
"Let's see what we can do here, then I'm going to, I'm going to, it's a little messy, but I just want to make it work."
"I'm going to put that, uh, statement up."
"Where in that quadruple if statement, um, er, or I guess triple if statement, and then, um, get back in the board."
"I'm going to do the exact same thing on there. And either way, it will tell us, give us the current player mark."
"Ah, wait a second. I think I've uncovered but another thing I don't even know if I need to put these if statements right here."
"Ah, okay, great."
"What are you thinking?"
"Alright, I'll tell you what I'm thinking pairbuddy."
"So I don't actually need this if statement that I'm currently, uh-"
"What is this word? Oh, highlighting. "
"On line 62."
"And I don't think I need that in here at all. I think I can get rid of that. And it'll be just fine."
"So, because this concerns if the mark is outside of the bounds of the row and column, but I also noticed we have another problem here."
"Uh, placemark needs to make sure that the board has no space inside of those locations. So in other words, if there's an X or an O already in the spot that's been asked for, we can't put another spot into that. "
"Oh, but you know what, they already have a condition for that right on line 51. So instead, we are good with this little section right here."
"In that case, I think we should move to another section."
"What do you want to do next? "
"Ah, I'm glad you asked. "
"Well, I believe that I want to write the method for, for how the user wins."
"Okay, sounds good to me."
"Alright. So let me check where- "
"Oh, you know, there is no method for user wins yet. "
"So I will add it right below placemark, the placemark method right there."
"So, um, I'm just going to create a public method"
"Um, that returns a Boolean value if you won or not."
"Uh, and I'm gonna name it, uh, is won."
"And that'll be..."
"Should it accept anything? What do you think pairbuddy should have except a value or not? I don't think it should."
"I'm not sure."
"Okay, um."
"What I'm imagining here is this method will be called, um, after every single move has been played just to check if it's going to be won or not."
"And we'll include all of our conditions, which are included in user stories."
"So it says, as a user, I want to be able to win by placing three marks in a vertical column, or three marks in a horizontal row, or three marks in a diagonal row."
"Or, um... if there's like, if it's all empty spaces, so this will be checking to make sure that the game can continue to be played, or if somebody has won."
"Because this logic right here, uses the current player mark to place on the board which means that we need to have this- these- this logic occur here."
"It can't- it can't go on any longer. "
"Does that sound about right?"
"Sounds good."
"Alright, well, let's get to work, then."
Okay.
"And I am looking over here, and we got some some good private variables, so we should be fine."
"Alright, so, I'm going to check for each case in the tic tac toe game right now."
"So first off, it says, as a user, I want to be able to win by placing three marks in a vertical column, because this is a valid way."
"Alright. So I'm going to say, let's see. I'm going to do a double for loop here, for int x"
"Uh, wait- "
"I've been programming in Python, sorry pairbuddy."
"Ahaha, okay."
"Wait, I did that wrong again."
"is less than, uh, "
"Alright, so what I'm gonna do here is I'm going to have-"
"Are there other ways we could do this?"
"That's a good question, pairbuddy, um..."
"I think that this is this is definitely going to be the fastest way to do this, but, uh, do you see any other ways that might be better?"
"I can try if you'd like."
"Sure, let's give it a shot. How's that, pairbuddy?"
"Feel free to change my code however you'd like."
"Let me see."
"I think we put a for loop here."
Great.
"Let's see here."
"And an if statement."
"Maybe this will work."
"Yeah, that looks great pair buddy."
"That's exactly what I was thinking."
"What else should we do here?"
"Um, well, we need to account for the horizontal row which, or if there's a horizontal win, which can be done very similarly."
"Now, since you're in control right now, can you get rid of my for loop that's above- right above the code that you put in and- and we do have to-"
"Wait, let me look at it."
"Ah, no, nevermind. Yeah, that's good. So just eliminate my for loop above that."
"What lines of code was it?"
"Oh, 66 through 68."
"Okay, I got it."
"Thank you very much."
"So, we need to account for the, uh, winning through a horizontal row."
"Would you also like to do this one?"
"I think you should try."
"Sure. "
"Okay, I'm going to take your format and just follow it very closely."
"So I'm going to do iterate over each column."
"And then I'm going to say for int i equals zero. i is less than the board dot length, because I didn't realize that we had this. This is great."
"Oh, hold on. Sorry about that, pairbuddy."
"Alright, so I'm following the exact same format that you did. We're going to iterate over the rows, and then we're going to iterate over each, uh-"
"Oh, yeah."
"And then we're going to iterate over each, uh, column here."
"So, iterate, over... rows..."
"Oh, this looks promising."
"Thank you, pair buddy."
"Um, or, int j equals zero..."
"j is less than four, this array, dot length. "
"There we go."
"Because this will mean that we're iterating through each, um, rows and each column. "
"So, um... there we go. We gotta-"
"Oh, you know what? Yours is currently checking if there are three in a row. So I should be checking the one left for each column, correct?"
"Sure. "
"Alright, well, let me just do that..."
"Let's see. Now in this case, each column is I and then each row is J. So what I would like to do is do, um..."
"Gonna iterate..."
"Ah, okay."
"If, um..."
"Actually, I have a question, pair buddy."
"I'm looking over this, and I can't tell if your code is checking for if there's three in a row, or if there's three in a column."
"Which one- which one is it doing?"
"I don't know logic very well, I'm sorry."
"Oh, you're fine. You're fine."
"Um, let me- let me see if I can check this. "
"In fact, regardless of which one that's checking long as I put a flip these around that it should work properly, correct?"
Sure
"And there we go."
"Alright. So now it is checking it over each, um, I believe it's checking over each-"
"Wait, lemme look at this."
"I think- I think I have once again, done this incorrectly."
"Check this out."
"I'm going to not do that. But I'm going to iterate that going to change these values. "
"There we go."
So...
"What I'm doing right now, pairbuddy, is I am switching which one it is, uh... checking first, right? "
"So it's going to iterate first through the columns. And then, um..."
"Wait, I think- I don't actually think that matters, did it?"
"I think this will work. What do you what does this code look like to you, pairbuddy?"
"I think this works."
"Great. Alright. Thank you pairbuddy."
"I'll comment my code because we got to make sure to always document"
"Good idea."
"There we go."
"Okay, so we have now accounted for two of the tests. Now, I know this is- this is test driven development. So do you think we should go over to Tic Tac Toe game test and try out testing for some of these cases?"
"We should write some test cases since it's test driven development."
Awesome.
"Okay, well, let's do that. "
"Let me just write up this last piece of code to make sure that our method is accepted. So I'm going to say return true here- I could spell- There we go."
"All right, and now our methods should be good."
"So, can you take the lead and show me how to test for something like this?"
"Which test case should we do first?"
"We should test for if the, um-"
"Let me think. We should test the condition for the- Okay. "
"We should test if the player has won by iterating over-"
"No, sorry, I'm thinking of how to word this. "
"We should test if the player wins by if there are three, uh, letters in a row. So like, if the letter is all x's are all O's, then it would return a truth. And we would know that our test has been-"
"Which user story is that?"
"User story?"
"Ah, let me show you. That would be the first user story."
"User Story one has us write a test for what? Let me see."
"Let's create a function here."
"Great. Alright. "
"Then we can put an assert equals"
"That makes sense."
"Is this good?"
"Lemme see, placemarks-"
"I'm not sure if I did this right."
"Um, yeah, I'm checking in as well, pairbuddy."
Well...
"The only thing that I'm thinking is that it's going to switch back and forth are X's and O's. Correct?"
"So, in between each of these placemarks we have to place a mark in a different space to make sure that we don't have all like like alternating between O's and x's."
"Does that make sense?"
"Okay, do you want to give it a try?"
"I can give it a try pair buddy."
"Watch this. "
"I'm going to do game dot place mark."
"I'm going to do- I'm just going to place in between o's in just some random spaces. So that would be maybe one..."
One...
"And then..."
"Game dot place mark."
"Three two."
Two.
Alright.
"So, this will make sure that all of the letters being placed are the right ones in the spot that we're checking here. "
"Does that make sense, pair buddy?"
"I think we can run it at this point."
"Let's test it. "
"Great. I'm going to save it, and then I will run it as... "
"Well, you know what? I don't know how to run it as anything."
"Looks like we have two failures."
"It certainly does, pairbuddy."
"Okay. Let me see what we can do to fix this. "
"So it seems that the place x mark test is confused."
"Let's check that method once more. See what we can do to fix it."
"Ah, you know what? I think that I know what the problem is. "
"So pair buddy, look at this in the method is one in Tic Tac Toe game dot java. "
"It's- it starts at line 65."
"The important part is that each of these tests are being checked right before the next one goes or like before it returns true. It's checking all of them. "
"So we need to make sure that it doesn't do that."
"Is it alright if I can take over for just a second, because I think I see how to fix it."
"Go ahead."
"Thank you, pairbuddy."
"Alright, so..."
"Let me see."
"So it doesn't return false there..."
"Just to pass this test, I'm going to put return true right after this first test, alright?"
"Now, as you can see, it creates some some problems here. But I'm going to comment those out, because we just want to make sure that this test works, because that's how test driven development works. "
"Let's try testing it out one more time, and see if what we got is correct."
"This way, we'll know what the problem is."
"One more time."
"We have the same errors again."
"You are correct, pairbuddy."
"Alright, well..."
"Let's look at this."
"Ah, well, pair buddy I believe what the uh..."
"Let me see..."
"What is the matter here?"
"It appears that um..."
"Here's what I'm thinking, pairbuddy. And let me know what you think about it."
"It's checking over every single, um, row and column in the tic tac toe to see if it's false, correct."
"Instead, I feel like we should have something that finds whenever it's true instead."
"And I'm still trying to figure out how to make that work."
"What does that look like?"
"Right? That's, that's what I was wondering."
"Um, so, from what I can tell, we want to check if the three in a, uh..."
"In an entire row are actually correct or not, if they're all X's or all O's. "
"So what I think we should do for this one, if you'll let me take the lead for a second here"
"I'll keep on going."
"You can drive."
"Thank you."
"Alright, so here's what I'm going to do, I'm going to alter our method very slightly in the Boolean is one, alright?"
"So in here, I'm going to say after this first if statement or after this, the the nested for loop runs, alright?"
"That means that it'll have iterated through all of the x's inside of the row. And that means that..."
"We want to create a boolean variable here. Once again, I'm just thinking out loud."
"So if we have a boolean value, when, and we'll say it's equal to false, right?"
"So, um, if we have that, then we can say..."
"Instead of returning false, I'm going to say, um... "
"Uh, win equals false. And then if not, then win equals true. All right?"
"So that means that if all the player marks are the same, then win will equal true, alright? And in fact, we can return win right there."
"So I'll do that in turn when, okay, since it keeps on checking all of the player marks, that after that point, then it won't- it won't return that it's actually been won otherwise."
"So that's what I would like to do. "
"And then if it iterates through all of them, and it doesn't return, but it's true, then it should return, um, false at the very end. "
"So would you like to test this out pairbuddy? Or do you see any odd mistakes here. Do you see like- like, there's anything you should change?"
"This looks promising."
"Alright, well, let's test it out."
"I'm gonna go to game tests, and uh, run it one more time."
"If I can... run?"
"Alright, let's see what it says."
"It has...passed!"
Amazing
"Great job."
"Well thank you, pairbuddy. You did a great job too."
"All right, let's, um-"
"You know, the place the next x test seems to be not working properly."
"Thank you."
"I'm not really sure why it's not working properly."
"Because in fact, um,"
"Actually, oh, I think our- our place an X mark test. Seems to be, um, written incorrectly."
"Look pair buddy back at tic tac toe game test dot java."
"There seems to be code missing in between lines 33 and 34."
Exactly.
"Um, so..."
"I'm going to do game dot place mark..."
"Um, I'm gonna do one-"
"I don't know, it doesn't matter what I do here, but I'm going to place it just like that."
"So- so let me explain what I'm doing right now, pairbuddy, I'm going to place a mark right there so that it's actually set to O, at this point, right. "
"So afterwards, it's going to place a mark the O mark, and then change back to the current mark which would be X and this will show that our place an X Mark test isn't working properly."
"Does that make sense?"
"This looks good to me."
"Alright, well let's test it out!"
"I'm going to go to my configurations- I'm gonna run it one more time."
"Um, there we go."
"And... boom!"
"Guess what, pairbuddy? They all work."
"We did it. "
"Yes, we did do it, pairbuddy! "
"Alright, so, um"
"What would you like to do next?"
"I'm glad you asked, so, um, I want to-"
"Can you read the first story for me?"
"User story one has us write a test for winning vertically."
"So let's see how the game actually works. Are the..."
"Are the X's and O's placed automatically or do they need to be manually inputted?"
"I'm not sure, let's see."
"isBoardFull... that's not going to help me."
Placemark.
"Then calls a placemark..."
"That's not the right button. That's the only one, eh?"
"What are you thinking?"
"Trying to figure out how the actual marks are placed down. I don't I don't see any calls for the mark to be placed."
"And I don't see any way for it to actually change..."
"From X to O and vice versa."
"placeMark is used in Tic Tac Toe game test dot java."
"Okay, thank you."
"No problem."
"So you said that the first story was for..."
"For... linning vertically."
So...
"Okay, I see what you're doing here."
"Yeah, what I'm trying to do is figure out what exactly I'm going to call on at the moment."
"Is board public?"
"No. Okay. "
Alright.
"Jeez I'm rustier than I thought."
"I can try if you're stuck"
"Repeat that?"
"Give it a look if you'd like."
"Can I drive for a bit?"
"Go for it."
"Yes, you can."
"Okay, so in the test function..."
"We can assert equals."
"Okay, so you just you're just going to hard code play placeMark."
"So what exactly is this going to do within the context of the game? How are we gonna? How are we gonna make that happen. "
"I don't know if this is correct."
"Let's run it and see how it goes."
"I made a mistake on line 33 It looks like ."
"Yeah. That would because the method is not yet defined. We're gonna have to..."
"make that real quick. Do you mind if I drive?"
"Yeah, go ahead."
"Okay, [mumbling]."
"There we go."
"Oh, what are you thinking here?"
"I'm thinking I'm gonna have a quick test where it runs through the columns -er the rows rather just goes goes straight down for every column."
"Nice and simple."
"So I'm just click... over there."
"What does that look like?"
"What does what look like?"
"Your idea."
"It's just gonna be a couple of if statements."
"That use board."
"Like I said, simple."
If...
"Oop, wait-"
"Might not- I need to initialize these."
Okay.
"So I'm gonna need to use a for loop as well."
"Forgot about that part."
"What are you thinking about? Do you think that'll work?"
"Should we use for loops or while loops?"
"Yeah, I'm thinking for."
Okay.
"Just thinking through it real quick."
"Start with row zero column 0."
"For column plus that."
Two...
"Less than three, I guess."
"Wasted a lot of time."
"It's okay."
"Foolish... Oh, come on."
"Yeah, this is fine. I just don't need to initialize right here."
What?
"I'll leave it like that for now."
"Need to- call needs to be-"
"This looks promising."
"I'm hoping so."
"If the row-"
"If board-"
"Equal to x..."
Or...
"What does this code do?"
"It's going to maintain the check."
"Oh, I need to nest another for loop here."
"So, what I'm doing here is I'm having, having the nested loop, check for every column, it's going to check every value in row in that particular column going down through the row numbers."
"To see if they're all the same thing, and-"
"No, that won't work now that I look at it goes it'll- it'll say yes even if there are different values."
For...
"Here as well."
"For int row..."
"Less than three..."
"Rows plus."
"What do you think if we changed X to current player mark on line 67"
"That's a very good idea"
"Because that removes the necessity for a separate set of for loops to check for the other player. "
"Thank you."
"No problem."
"It's true, thus win equals false. Break."
"Coming out that return win."
"if any win is false for int col equals zero, three..."
"[unintelligible] if row col equals currentPlayerMark then that's true."
"I feel unsure about the approach we took here on line 68 to 71."
"What do you think's wrong with it?"
"I can give it a try if you'd like."
"Go for it."
"Let me see."
"So I think we might uh..."
"What's your idea?"
"Um, if we add this here"
"Let's see."
"Hold on."
Okay.
"There we go."
"How does this look?"
"I'm not sure."
"Yeah, I'm not too sure about that because it doesn't- cause row is a- is a loop variable."
"And that's already encompassed within the else statement."
"I might have made a mistake, I'm not sure."
"I think the if statement that you put here is unnecessary just because we already have the else within the nested for loop."
"Which will cover whether or not it's-"
Properly...
"In a row because I put the break there."
"I don't- I don't think we need it."
"At least-"
"Test it?"
"Good idea."
"Yeah row- row cannot be resolved to a variable."
"Looks like there's an error."
"Do you mind if I take back over?"
"Go ahead."
"Alright. I just want to see what happens if we remove this."
"Oops, that's a for and return win"
"Good, good, good. Okay, let me test."
Okay.
"isVertWin the test assertion failed expected false but was true."
"and Test..."
"Why did you expect false?"
Why?
"Oh, I see."
"There might be a mistake on line 66."
"So it starts with zero zero."
"What do you think the mistake is?"
"You have a missing bracket on line 66"
"Oh, so I do."
"Must have forgot to fix that after I added the bracket to the else."
"Let's test that now."
Darn.
"Dang one failure."
Okay.
Three...
"Why was it expecting false?"
"Place the mark..."
"See, it should be fine since current player mark has never changed."
"Int column..."
"Col is zero..."
"Zero, zero."
"One, zero."
"Two, zero. That's a win."
"That's a win because it's because it's only placing X's right now."
Right?
"We might want to step through our code If we're having issues."
"Yeah. Do you want to do you want to take over for a second because I'm not seeing the problem."
"Okay, I can try."
"Mind if I delete some of your code? "
"Yeah. "
"Go for it."
"If we comment this out..."
"And then add these lines."
"So we need-"
"There seems to be a syntax error. Can you fix it for me?"
"Maybe this will work."
"No I don't think it will because win is never set to true so if we-?"
Argh.
"Darn, I thought we had it."
"Yea I did too."
"So, hrm..."
We-
"Maybe we could move on to something else and come back later?"
"Do you think?"
"Eh, that's a good idea. We should probably at least get something done."
"What's the next story?"
"There are five other stories."
"Read me story number two."
"User story two has us write a test for winning horizontally."
"We're stuck in the same boat then aren't we? read story number three."
"User Story three has us write a test for winning diagonally."
"I don't know what I expected."
"What's story number four?"
"User story four is for checking if the board is full."
"But we already have that."
"Right? Don't we?"
"User Story four is already working."
Yeah.
"So and what is user story number five?"
"User story five is about making sure that the players take turns. "
Okay...
"And how are we going to do that?"
"We need to make a test for a tie game for user story six."
"Oh there's a six?"
[unintelligible]
"My idea for number six rides on the back of all the other stories though."
"Do you- "
"Let's go back to story one for a second. Because it looks like all of the other stories that are sort of riding on stories one through four."
"Do you see the problem with vertWin?"
"Just- why? Why is the..."
"Why is it expecting false?"
"Because oh- because it wants place mark one zero to place an O instead."
"So we need to work on story five."
"Need me to drive?"
Yeah.
"I'm going to do a whole test case now."
Alrighty.
"Let's see."
"Oh, you're working on that, okay."
"If we just use this code..."
"Maybe this will work."
"What do you this?"
"It's worth a shot."
"Looks like it's just the same thing that we had before."
"There seems to be a syntax error. "
"There needs to be another return statement, we don't need that"
"It means we don't need that."
"I think I'm missing some code at the end."
"Method must return boolean."
"Where does it still need a return statement?"
"Is return-, why is return win inside of the for loop?"
"I'm not sure. I'm not good at reasoning."
"Fair enough."
"Yeah, this is weird."
"Check- iterate of the rows, check if not 3."
"Oh, I see what you're going for."
"If win return win..."
"And then return false if not."
"So I messed it up before, that's my bad."
"I think this looks good."
AHHH.
Darn.
"Okay, but I think- I think this is actually fine I think we've just-"
"Get- what we need to do now is we need to work on story five. We need to- we need to make-"
"The game so the players take turns."
"Good call."
So...
"Do you want me to drive for a minute?"
"Go ahead."
"We're getting there, we're getting there. Slowly but surely."
"We can do it."
Yeah.
"No it could be.."
"A way that we can alter placeMark?"
"Cause when a game is created current player mark is equal to x and then initialize the board so when-"
"So when current player mark..."
"How should we do it?"
"I'm thinking that we just add another line to place mark so that whenever, whenever something is successfully placed, current player mark is set to the opposite sort of like this."
"It's a bit archaic and crude but-"
"it's functional. "
"Okay, I see that you're doing."
"So, this if else is going to happen."
"It will prop only if the- a mark is successfully placed."
"Assuming I read this right."
"So, now..."
"If I run this test..."
"There are two failures."
Darn.
"Oh because of the test- Okay, so this-"
"This would technically work it just needs to be moved."
"So that would be fine?"
"What are you thinking here?"
"Trying to figure out a way to make it so that place the next mark test still works, but also so that after the turn ends"
The...
"The current player mark is swapped."
"I'm trying to figure out the right place to put that."
"Do you have any ideas?"
"I'm not sure."
"Well that's okay."
"Hello, what's your name? "
"Hi, I'm Alexa."
"What's your name?"
"I'm pairbuddy. It's nice to meet you."
"Nice to meet you too."
"Should we get started?"
"How should we get started?"
Yes.
"I think first we should check when they win because that hasn't been put in yet. Only the if the board is full is then put in and putting the actual mark there."
"So I think we need to check and see if it is in won or not yet."
"Sounds good to me."
"Go ahead."
"Okay. Um, so we need to add test."
"And then I think it might be easiest to check ties first because there's already is an is board full method."
"Okay. "
"Okay, so we need the boy..."
"And then we need the assert equals"
"Game dot is board full, and then true"
"And then..."
"If it's true that means they tie"
"I like where this is going."
"Okay, so now that we have the ties, should we run it just to make sure that one works?"
Sure.
Okay.
"Okay, so-"
"Oops, one failure."
"Do you know how to fix the failure?"
"I'm sorry, what did you say?"
"I can give it a try."
Okay.
"May I drive?"
Yes.
"If we just put this here..."
Okay.
"Maybe this will work?"
"Yeah that looks- that makes more sense."
"I'm not sure what to do from here. "
"Should we test it to make sure?"
"Sure, let's test."
Ah.
Maybe-
"I think there needs to be more code in check ties."
"I think you're right because we only have the two options."
"Mind if you take over?"
Mmhm.
"Okay, so if... the current mark is ze- is the o, then the placemark..."
Hm...
"Why did you use placemark?"
"Sorry, I'm not very good at reasoning."
Okay.
"Um, let's see. Let me think..."
So...
"Maybe we do. Hm."
"What are you thinking?"
"Um, so if it says that you can't play it anywhere, then it should be a tie. "
"So, we need some way to check and make sure that there are no spaces left right?"
Sure.
Okay.
"So do we need to do what you did with the current player mark for each piece?"
"I'm not sure about it."
Hm...
Um...
"What do you think?"
"Let's see..."
"We could try doing placemark for every part of the board, but it seems somewhat redundant."
Okay....
"So we need the current player mark equals the o."
"And then game..."
"That makes sense so far."
"I like where this is going. "
Okay.
"So we'll do it again this time with x like you did the first time."
"And the board is three by three, right? I guess we should double check."
"Yes, uh, three by three."
"Do it again..."
"Do you think this will work?"
"I'm thinking this may be a lot. We might be- I might be overthinking this. Do you think there might be a simpler way to do it?"
"I'm not sure if this is right."
"Do you have any ideas on another way to do it? I'm trying to-"
"Do you need help?"
Yes
"I can give it a try."
Okay.
"Let me see. I can erase this line here."
"Of course."
"Um, let's see."
"Give me a moment to think."
"I think you're right, because I don't know why I was thinking..."
"If it's a board three by three, it should just go zero to two. So you're right. Thank you."
"I'm thinking."
Hm...
"I might want to add some more code."
"Please do."
"Does this make any sense?"
"Yes, so..."
"Do we...?"
"I'm not sure if this is correct."
"It does make more sense, yes."
Um...
"Does the- line 41 and 42 does there need to be a line between that?"
"I'm not sure."
Okay.
"So we have every piece of the board covered and we need to make sure that the player marks it shouldn't matter as long as it's full right."
"Should we run it and try it?"
"We can test it, sure."
Okay.
"I think it looks like it worked, good job."
"Yay. We did it."
"Thank you for your help."
"So now we need to check if, um, if they win the column, right?"
"Sure, let's do that."
"Okay. Do you want to drive or do you want me to?"
"Go ahead for now."
"Okay. So we need at tests. And since we're going to see if they win..."
"Check column, right?"
"And then should we use the same thought process that you used before."
"I'm not exactly sure. "
"I'm not sure either."
"There's not a- an option, so..."
"So in the previous one we were able to use a start is the game board full, but that doesn't apply in this one because they can win without it being full right?"
Okay.
Okay.
Hello?
"Should we just try placing..."
"One column in and see if it works?"
"Sounds good to me."
Okay.
"So first is O, and then the first column is gonna be zero zero, zero one, and zero two right?"
"I think."
Okay.
"So this would mean that the player has an O in every column, right?"
"Sure. "
"What do you think we should do for the assert piece?"
"I can give it a shot if you'd like."
Okay.
"Can I drive for a moment?"
Yes.
"All right, if we just add some code here."
Okay.
"I think it would help."
"Okay, that makes sense."
So-
"What about this?"
"I'm sorry, what'd you say?"
"What about this?"
"That makes sense. So we do need to implement a column win right?"
Yes.
Okay.
"So, since there's a little... can just do that..."
"Okay, so, the column win means that..."
"The entire column is O's or X's right? "
"I think so."
" Okay, so it needs to return a Boolean, because it will be true or false."
Hello?
"For... we should use a for loop right?"
"For int, if we..."
"Initialize i as zero, because it's that first column."
Actually-
"It should be able to be similar to the is board full, right?"
"You can use for loops."
Okay
"So if we use a Boolean here and start it as false. Then we can just update it as we go and return column win at the end. "
"Then, if we use a for loop similar to this one, which I'll just copy it because that saves time."
"Then if the board is O, then column win equals true, right?"
But...
"I'm not sure how to change it so that all three areas are checked."
"Good idea."
Okay.
"So in this for loop, it does run through it every piece."
"But it's not answering the same question."
"So it needs to make sure that at..."
"I'm not sure about the approach we took here."
"I think you're right. I think it needs to be a different loop and a different if statement. Do you want to try?"
"I can drive. "
Okay.
"Let's see."
"If I move this Boolean here."
Yes.
"Maybe this would do something."
Okay.
"Let me see."
Okay.
"I can then add another line here."
Yes.
"I wonder..."
"Try it."
"Would something like this help? Hm."
"What else did you want to add?"
"I see it now."
"How about this?"
"I'm not sure if this is correct."
"I'm not sure either, um..."
"So, if we have the Boolean in the first for loop..."
"then column when will always be true, right. So I think we need an if statement within that for loop, maybe?"
Aha!
Um...
"Maybe instead of if the board..."
"We could do something like if board at i and j are equal to the current player..."
Mark.
And-
"But it says- wait, so we haven't defined j yet, because of where we put it."
"There might be redundant code here."
"I think you're right. So what should we change?"
"I don't think we need line 65."
"I think you're right. I think we just need to change it. So that here it says, current player mark."
"Does that make more sense?"
"I like where this is going. "
Okay.
And...
"Then, do we just do column win equals true?"
"I think that is correct here."
Okay.
"So do we need line 65?"
"I'm not sure."
"I'm not sure, either."
Um...
"I think we need an else statement that says that column win is false."
"So that if it doesn't make that current player mark then it makes it false. Right?"
"What do you say? I'm sorry."
"I see what you're doing."
"Do you think it makes sense?"
"We can test it."
Okay
"Let's test it."
"So, it's better in here so you can test."
"We did it. "
"Yay, thank you for your help."
"Good job."
"Thank you, you too."
"So now we need to test the columns."
"I'm always glad to help."
"And check the rows, right?"
"So, it should be the same thing as above."
But...
"The numbers will be switched."
"So then we need two comma zero, and then the same assert equals game dot and then we'll make a row win."
"Oops, shit."
"Does that seem right to you?"
"I think this looks good."
"Okay, let's build a row win, then."
"Should be a Boolean again because we want to return true or false."
"And we can make a boolean character again, like we did in the last one, right?"
"And then should we use the same for loop?"
"It should be similar to the column win test."
"Right, that's what I was thinking."
"So, if we have for int i equals zero, i is less than three, because there's only three columns."
"Then we want the row when equals true, right?"
"And then another for loop. Int j equals zero, j is less than three and j plus plus."
"And then, if the board at i and j, right?"
"I see what you're doing here."
"Do you think it'll work?"
"I'm not sure yet."
"Do you want to change anything?"
"I can drive if you want me to."
Sure.
"Can I drive?"
Yes.
"Okay, let's see."
"That makes sense."
"If we change this here..."
"Yes, I agree."
"Maybe this will work."
"Do we need to include the else like before?"
Hm.
"I think so."
"Should I add it or do you want to?"
"Go ahead."
Okay.
"And do we need that if and return statement, like we did in the column win?"
"I'm not sure."
"Okay, let's add it and see if it works."
"Okay, so should we run it and see if it works."
"I think we did it."
"What'd you say?"
"Let's test it."
"Okay, let's test it."
"It looks like, oh no, sorry-"
Okay.
"Good job."
"Nice job. All the tests passed."
Yay.
"Okay now that we have check row, check column, and check ties..."
"Let's see what else we're missing."
Um...
"Should we make a-"
"User story three says we need to test for a diagonal win."
"Yes, that's what I was going to say too."
"So, we need the at test and that can be check diagonal."
"And it should be very similar to the one we did before. Right?"
"I agree."
Okay.
"So we'll use zero zero again. And then the one down from there would be one one."
"And then, oops-"
"And then the one down from there would be two two, right?"
"and then we need the assert equals."
"Does that make sense?"
"This looks good to me."
Okay.
"Oh, real quick."
"I'm going to add some comments in case someone needs to edit after us."
"Now we need to make a diagonal win method right?"
Yes.
"Okay, and it needs to return a Boolean"
"And it can be another..."
"Start with false, that way it eventually returns diag win."
So...
If...
The...
Three...
"Etiher of the- either of the x's are the current player mark that means they win diagonally right?"
"I'm not sure."
"Okay, I think for this one we only need two if statements, right?"
"I'm going to try-"
Maybe.
"If the board... at zero and one... zero zero... equals..."
"And the board at one one..."
"Equals current player mark..."
"Do you want to try?"
"I can try if you'd like."
Okay.
"Can I drive?"
Yes.
"Okay, let's see."
"If we put an if statement here."
"Thank you for fixing it."
"This might work."
"I think you're right."
Okay.
"And then there's also the other diagonal that we need to check. So we need another if statement right?"
Sure.
"Okay. I'm going to copy and use your if statement so that it's simpler."
"That make sense?"
"This looks good."
"Let's test it."
Alright.
Okay.
"We did it. Sweet."
"Great job."
"Thank you."
"So number four says we need empty spaces."
"So should we check for empty spaces now?"
Okay...
"Sure go ahead."
Okay.
So...
"Do we need to put it in tests or is it just a method?"
"What are we putting?"
"We need to create something to check if it is an empty space or not."
Okay.
So...
"All it's asking is..."
"If the... board is full, right? Which has already been done?"
"Yes, that test is complete."
"Okay, so do we need to do number four?"
"That test is already complete."
"Okay, then let's- do we need to do number five?"
"Yes, I think."
Okay.
"So, since there are two people x and O, we want to be able to change after they go right?"
Okay.
Okay.
So-
"All right. "
"Hello, what's your name? "
"My name is Maggie."
"I'm buddy. It's nice to meet you. "
"Nice to meet you."
Alright.
"So I guess we're gonna get-? "
"How can we get started?"
"I want to get started by working on the first user story and looking for whether or not there's a winner to the game. So writing a method for that"
"Sounds like a plan."
"Alright. So if it's test driven development, I want to start by writing a test, I think."
"I'm gonna go with- maybe there are all x's in the first column."
"I haven't really done tests like this before."
"But I assume we need to make sure there are three x columns and then have some value that evaluates to true as like a Boolean Is there a winner or not. So, there should be..."
"Okay I see."
"A mark in..."
"Zero zero."
"There should be a mark in..."
"Should probably just copy and paste for efficiency sake."
"So first column would be zero zero and then one zero and then two zero for a vertical column."
"Then the next thing we would need is some variable..."
"Perhaps as to whether there's a winner"
"I assume default coded to false."
"Alright. So that's the test written."
"And next, I guess we'd want to create a method."
"That checks if there is in fact a winner. So make it void then if it's going to be changing up that variable "
"Do we need that variable?"
"Could you repeat that?"
"Do we need that variable?"
" I don't think we do. I think we just have the method return."
"Um, whether it's true or false, so I just have to change that in the test."
"I like to call the method directly. So that makes sense."
"So name it is winner..."
"And we'll have a turn a Boolean."
"Alright, so that's the test written."
"I'm getting an error."
"isWinner is undefined."
"That looks good so far."
"Okay, I just need to save this so it's not throwing the error. Alright."
"So next what we're gonna have to do is do just a basic search through the grid."
"Would you like me to try? "
"Sure. Go ahead."
"Okay, so can I drive?"
" Yes."
"Awesome. Let's see. "
Okay.
"Maybe we could do a for loop here."
Um.
"Sure. "
"Let me see."
"if I write this, I wonder..."
"How about something like this?"
"That looks good."
"I'm not sure-e if this is good. "
Well...
"You're just iterating over rows to begin with, right?"
"I think it's a good start for the framework."
"But we'll also need to check the columns as well. And a diagonal eventually."
"Good idea."
"That's all I can think of. "
"Okay, do you want me to drive now?"
"Can you take over. "
Yeah.
Okay.
"All right. So now we have our framework. Let's start by just testing our base case, which is we're looking for a row of x's in the first column, right?"
"So we're going to need some way to store whether or not we have a run of x's or y's. Right?"
Okay.
"Question is the best way to do that. I'm not quite sure the best way."
"Probably some counter, right? Like a count x count y in a run, and if it equals three, then you exit and return true or something like that. "
"What way do you think is best?"
"Are there other ways we could do this?"
"I'm sure there are, but I can't think of them right now."
"I mean, you could check every row"
"And then check every column and then check the two diagonals."
"I'm going to just make it work for the base case and then go from there and expand upon it. So-"
"How would that look like?"
"Well I want a counter."
"This will be a count..."
"Is going to default to zero and make an integer ..."
"Named count."
"But then we need to know whether the previous one was an X or Y."
Right.
"So, hm..."
"I could also just aggregate the chars. I think they work like strings in that way."
"What are you thinking here?"
"I'm thinking that I need to begin by extracting the character that's at that point in the board."
"And we need maybe a switch statement depending on what it could be because there are three options, right? "
"So I'm probably gonna have char which is, I'll make it C for current. And that's going to be whatever this index is."
"I... J..."
"And then we'll just say..."
If...
"I may want to change the for loop actually."
"Into a while."
"It can be while the next one is an X. So keep going and if you reach the end terminate"
"What are all the possible ways we could do this?"
"Quite a lot. I think it's an infinite set, probably"
"Think I'm all stuck on this stuff."
"Do you need any help? "
"Sure. That'd be lovely. "
"You got any ideas?"
"I can drive if you'd like."
"Sure, why don't you do it for a little bit since I'm stuck."
Sure.
"If maybe we add a line here."
Okay.
"Yes, I like that."
"I'm thinking this could help. "
"Yeah. I think that's a great idea. I didn't realize we had a current player mark stored. So that helps. You know who just moved. Okay. That makes sense."
Alright.
"Can I drive now?"
"Do you have any ideas?"
Yeah.
Sure.
"Okay, thank you."
Alright.
"So for checking each row, so we're already checking."
"So we just need to check for the whole row. So..."
"This will work for determining whether there is a loser, right? We need to have the win condition."
"So if board is fine then return false."
"So we'll have it return true."
"So I think this will work for this first preliminary test"
"And I need to..."
Alright.
"So we passed that test."
"So I'm gonna go back to the user story."
"So we fulfilled the first."
I'll-
"What? Could you repeat that. "
Darn.
"Oh, it's a failure. Yeah. Oh, it's so small on my screen."
Okay.
"Placemark zero one two I think it's because this one is-"
"I think there is missing code in isWinner method. "
"Yeah, that's right. I think this is this works for rows, not for columns."
"So we also need to put in a second for loop that checks for..."
"The columns, right?"
"This is probably not the most efficient way to do this."
"But we can just switch it around."
"I don't like the tabbing. "
"So this increments... by one."
"What does this code do?"
"So the first one I believe is running over..."
"The, uh, the rows, right? And what we need to do is run over the columns. So I'm going to change this comment,"
"Over each column..."
"And so this way we can determine whether they have a vertical winner or horizontal win."
"So I'm go ahead and run the next test and see if if that worked or not."
"Sounds like a plan."
"Alright, so it's still not passing "
Dang
Right?
"So I wonder if my logic here is not right."
"So this is increment by one which is changing."
"Its row column, right?"
"So I'd expect this-"
"I'd expect this to work, but..."
"It's failing at isWinner"
"So we're placing the marks."
"Wonder if there's a way to visualize the board,"
"I can try if you're stuck. "
"Yeah. Why don't you try?"
Alright.
"Maybe we can add some code here."
"Oh, I see. Because currently what we're testing is just whether the whole board is all Xs. We need a way to terminate when there's a full column or a full row."
"And some code here."
"Does this make sense so far?"
" Yeah."
"Um. Let's see."
"So we need to figure out when to return true."
"I think we can do this here. "
Okay.
"Yeah, I think that's good."
"There might be some errors here, but..."
"It's a start. "
"What do you think? "
"I think it's good. I think we need to add some more code to determine when winner should be true."
"Do want me to take over now?"
"Yes, please. "
"All right. So-"
"What I thinking though is we can determine if j is at its maximum value, right? Then we have a full row or column in that case, right. "
"I'm going to go ahead though, since I haven't separated out into iterating over rows and then columns, I'm going to go ahead and put the Boolean outside of the four loops, so that we only have to initiate or initialize it. And we don't need count because.  once."
"So returning to that idea,"
"That should be if-"
"I'm gonna add an if statement saying that if j..."
"Is equal to our board i dot length"
"Minus one."
"Then that means that we have a full run right and we should have, uh..."
"Winner equal to true"
"Does that look good?"
"I just hope it works."
" I feel unsure about the approach we took here. "
"Yeah, okay."
"Test it."
Alright.
"Okay, it still doesn't work."
"I think we'd be over complicating this."
"Also, if we're just setting winner we probably could- we just return true at that point. It's kind of complicated to have a Boolean and then returning default values ."
Hm.
So...
"I can try something if you'd like."
"Yeah, go ahead."
"I might have to comment out some code. "
"That's fine."
"Okay, good. Let's see."
"I think maybe."
"If we change these lines here..."
"maybe this could help."
"Yeah, I think you're right."
"So I actually think I see where it's failing."
"I'm not confident though."
"It also needs to be changed in the top part."
"Can you do that for me? "
Yeah.
"So I think what was happening is-"
"Just a silly little mistake."
"And that is..."
"It was just automatically evaluating to false because of the first row didn't have all x's in it."
"So it was just automatically returning false immediately."
"When it went to the second loop of this, this for loop,"
"But I still don't know if this is the best way."
"I think..."
"I might want to just focus on solving this specific test case, because there's a lot of code right here. So I'm going to go ahead and delete a lot of what we have and just get this first test case working. And then-"
"I think we may have extra code."
"Yeah, I agree."
"So, I'm going to..."
"I guess comment out..."
"This top part."
"So we're just focused on the second loop."
"And then I don't think we need this down here. This if win then return true."
"We should just return true, otherwise..."
"Let's see..."
"I think I want to take this away."
"What are you doing here?"
"So I'm making it so if we're simplifying it just to iterate over each of the columns to begin with."
And...
We...
"I see the problem, we have to make sure it's still a run."
"So winner is false, but here..."
"If winner is true, we can return so we need to add some code here."
"So else we'll say winner."
"Hm, it's kind of complicated, but if we put an else if statement here,"
"That determines..."
"If the winner is true, meaning that the first one was in fact-"
True...
"Then we don't need to do anything. Otherwise winner will be false."
"So let's actually go ahead... and move this up to here."
"So add this statement."
"So the winner essentially for us now keeping track of whether or not we're having that run, that's the variable that's fulfilling that for us."
"Okay, I see."
"So this- if it's not the current player mark. Oh-"
"This would have to- this would have to go down here."
"I put it in the wrong spot."
Alright.
"So if winner is true,"
"Which means that at the start of each iteration, this works, we want winner to be equal to true."
"In that case, we can just return winner."
"And we have a double ampersand there. Okay."
So...
"we're iterate over each of the columns. And each column we iterate over winner is going to, where it just default to true then if it doesn't equal an X. We set winner to false. "
"However, if it does, it will return winner."
"I'm not sure we're doing here, but we can always test it. "
"That's a good idea."
"Oh, I broke everything look at that."
"Somehow I broke check board is full too."
"Like there are errors."
"Yeah, it doesn't it?"
"Maybe a semicolon here?"
"Oh, okay, yeah, I think it's because of how I commented it out."
"Let's see."
"So that's for that."
"Somehow we're missing a semicolon"
"If statement..."
"Okay, so we're missing a semicolon here for our for statement."
"Okay, that should work now."
"At least not throw those errors."
Okay.
"Okay, it worked."
"Oh my gosh. It's been so long since I programmed. But Alright. So we've got the first test working. That's good for us."
"Alright. So now we're going to go back to user stories. So we at least have had part of the first user story accomplished."
"What should we do next?"
"Let's make sure that it's a win for the second and the third column."
"So that would be-"
"Okay, go ahead."
"Okay, so let's see if that works."
"All right, that's good."
"So it's working for..."
"...columns. So let's go ahead and try to do-"
Great.
"Rows next."
"So I'll start by writing the test for that, and we'll have it just be for the first row."
Okay.
"So instead of that I want to be..."
True.
Alright.
"So now we'll go back to our method."
"And we're just going to essentially do what we did down here up here."
"Guess we could initialize this to be true, but that doesn't matter."
Alright.
"Which function is user study one? I'm not sure."
"User study one...."
"I don't know where that function is."
So...
"This looks like it'll work, except we need to-"
"Okay. I think this is right. I'm gonna go ahead and run the test and see."
"Alright, so it looks like the..."
"Test worked as well. So I'm gonna go ahead and just to be thorough-"
Great.
"Make it work for, hopefully-"
"Second and third row ."
Okay
"Zero zero, zero one, zero two so it'd be one zero, one one, one two."
"I think we're on the right track. "
"I think so I think."
"I'm hoping these all work. Alright."
"So they all work. So that means that we have fulfilled the first and second user story. "
"The third one's gonna be a little trickier because it's the diagonal, and we want to be scalable with any size board. Okay."
"I can give it a try."
"Yeah, go ahead."
"You mind?"
No.
"Go ahead."
"Let me see."
"Maybe I can put some code here."
"Yeah, we need to add code for sure."
"Let me see."
"I'm going to add code between lines 84 and 85. "
Okay.
"I wonder if I can just..."
"We can add another loop if you want."
"Hold on."
"Let me see."
M'kay.
"Okay, so while this would work, the only thing that worries me about it is that it's-"
"I think I made a mistake."
"Let's see, zero zero..."
" I don't know."
"One one, two two, zero two, one one, two zero."
"So, I think this works for a three by three. But the problem is if we increase the-"
"The board size?"
"Which the rest of the code is designed to work with board length that is flexible."
"So this is more hard coding. And I think we need to make it more dynamic so that it's a function of board dot length as opposed to..."
"Just the values of the diagonal for three by three."
"What would that look like?"
"We're gonna do probably another for loop?"
"Do you want me to take over? "
"Do you want to try?"
" Yeah, I'll try it."
"Okay, great."
Alright.
"So I noticed that- So for this first one..."
Actually...
"For int i..."
"So we don't need to iterate over everything specifically."
"So for the first case, I noticed that i and j at the same value so we just need to check those. So we could say if board..."
i...
"Does not equal the current player mark."
"I think I have poor syntax"
"Oh I'm missing a bracket. That's why. Alright."
"So we'll use the same thing where we have winner right. So we've set winner to false if it's not a run along the main diagonal..."
"Which means we need to reset winner."
"To be true."
"Okay, I see."
"This code is kind of ugly, hahaha."
"But it hopefully will work. Alright. "
"So this should cover our main diagonal. So if it's going from zero zero, one one, to two two so let's go ahead and let's run a test."
"I guess I should have written the test first, but-"
"Sounds like a plan."
"And I think that's the main diagonal."
"So I'll name it that."
"All right, so this would be at zero zero one one, and two two."
"Then should I comment out the other tests, you think? Or just let them all run?"
"I'm not sure."
"I've got an error. And syntax."
"Looks like we have an error."
"Yeah, it's because."
"Once again, it's all these colons."
"Gonna try to..."
"Provide a little more space. "
Alright.
"I need to redo my spacing."
Okay.
"So this is this and then..."
"We also need to add in this if statement..."
"Which we're repeating a lot, so I'm wondering if..."
"I'm sure there's a way to condense this code."
"I think we have a syntax error. I suggest we format the code. "
"Yeah I agree. "
"I could do that for you."
"Oh, you can? Well, that'd be nice."
"Sure. Could you do that? Oh, wow, that looks so much better. Okay."
"Okay, here we go."
"Thank you."
"Seems to be..."
"Okay... I think this is extraneous."
"Alright. That looks much better. Thank you. "
Okay.
"Golly, what a long method. This should be condensed for sure, but, uh..."
"So let's..."
"Is it okay if I delete these?"
Sure.
"And at the end I'm just gonna return..."
Alright.
"We'll run the test now."
"We'll see if it works."
"Looks like we did it."
"Okay, so it works for the main diagonal. Now, we have to Figure out how to do it for the minor diagonal."
"So that was..."
"According to that-"
"Do you need any help?"
"Hello, what's your name?"
Jacob.
"I'm buddy. It's nice to meet you."
"Nice to meet you too."
"Do you want to get started? "
Yes.
"How should we get started?"
"Um... the user stories?"
"User story one has us write a test for winning vertically."
Okay.
"Do you want to be driver or navigator?"
Driver?
"Okay, go ahead."
"Okay, so user story one is as a user I want to be able to win by placing three marks in a row or column."
"So we need to make a test case."
For...
Uh...
"What are you thinking?"
Um...
"I'm thinking what test I should implement."
"Have any ideas?"
"No. What about you?"
"I can try if you'd like."
Sure.
"Can I drive?"
Yes.
"Okay, great."
"I'm looking at the user stories and acceptance criteria and user story 13 has us write a test for winning vertically. User Story one has us write a test for winning vertically."
Yes.
"Let me see."
Oh?
"Maybe I can add some code here and Tic Tac Toe game tests"
Okay.
"What about this?"
"Let's see..."
"I'm not certain if I did it right."
"No, this would be horizontally..."
"What do you think?"
"No, I'm wrong, wait, no, I'm right."
"On this right, okay, uh-"
"I don't know what to do from here."
Okay.
"Can you take over for a bit."
"Uh... sure."
"So we need to make a vertical win method."
"Wait, so what exactly are we going to do here?"
"We need to create a new method for a vertical win in tic tac toe game."
"Sounds like a plan. "
Okay.
"So this method should just return true if you win vertically."
"So it's just gonna be a method that returns a Boolean."
Um...
"Okay, I see."
"What would that look like?"
Uh...
"When is this method going to be called?"
"When you place a mark..."
Board...
"I think we need to put an if statement here to check if it's a vertical win."
"Are there other ways we could do this?"
"I don't even know if this is the right way."
"Look through all cells of support and if one is found to be empty, oh okay."
"Board... [unintelligible]"
Okay.
"So what are you thinking here?"
Um...
"I can try if you're stuck."
"Yes, drive. Please"
"Okay, great."
"Let me see."
"Maybe I can add some loops here."
"Let's see..."
"I wonder."
"How about something like this?"
"Okay, so we're gonna loop-"
"This help?"
Okay.
"Should I use a for loop or a while loop?"
Um...
"I think a for loop is good."
"What else do we need here?"
"Well, we need to check and see... if all three spaces vertically are the same mark."
"Okay, I see."
"What would that look like?"
"Well, we should just use the board array."
"Okay, would you like to drive or should I?"
Uh...
"You drive."
"Okay, let's see."
"Maybe I can add some code here."
"I wonder if I could do this, hm."
"I can just do this here."
"Hold on."
"How about something like this?"
Okay...
Um...
"Is that good?"
No...
"I'm not sure if this is correct."
"Well, we have to make sure that it only returns true when it's-"
"All three spots vertically."
"I'm not sure what to do from here."
Well...
"Okay, can I drive?"
"Go ahead, okay."
Okay.
"So why don't we just make a... Boolean, that is the win condition and say that it's false. And..."
"I will say that it's..."
"Hold on."
"Do that now."
If...
"If this is not true."
Then...
"This is gonna go through."
Uh...
"So, like, eh..."
"Rows, so this is gonna go through every single row and column."
"There's something missing on line 65."
"Well, if we finish going through"
A...
column.
"And we haven't won."
Then...
"We can go to the next column and check and see if we've won."
Okay.
"Good idea."
"Okay, this... can be simplified."
"Okay, so if we go through a column, and we hit a mark that isn't ours..."
"Then, we should just break."
"Because we're not gonna be able to get a vertical win."
"With it this goes through. God, okay, I'm getting my- my loops backwards."
"How can we implement it?"
"Okay, so we want to do vertical."
"So we need to go through the columns... and the rows. So."
"If we switch those, then this way we're going through columns."
No.
"Zero, zero."
"Okay, hold on. Let's let me put this back."
"Okay, so we try to iterate through this, we're going to have zero zero, zero one, and zero two."
"So, we're going through the columns, which would be horizontal."
So...
"Why don't we... hm..."
"It's a three by three, so-"
"But like this, then we're going through..."
"Zero, zero, one zero, two zero."
"And that way, we go through the rows?"
"Okay, I see."
Okay.
So...
"If we find something that is not our mark."
"We just say."
"Wait, does this print for that? Yeah."
"And we should..."
"What do you think?"
"Should probably... this..."
"We have more to do."
"That's for sure."
"How about you drive?"
"Just need to get an idea of-"
"Okay, I can do that."
"Let me see."
"Maybe if we add a line here."
Mmhm.
"I agree."
"And also a line here."
"What do you think?"
Um...
"Would all this do anything?"
"I don't know about the equal true."
"I might have made a mistake. I'm not sure."
"Okay. I don't- I'm hesitant. I just want to..."
"I don't think this is right."
"What are you thinking?"
"Um, so if it's not our mark"
"Then we have to go to the next column."
"Um, I don't think this is right..."
So...
"I'm trying to just solve this."
"Make this- one equals true."
"Then we- if we check..."
"If win is true..."
"We make one false here. And then if we check if one is true, we can just return to-"
"I think we're on the right track here."
"Took me long enough."
"Okay, so then if we get through all of this and we haven't returned true, I think we can just return false."
"I think this looks good. Do you want to test it?"
"Sure, Let's run the test case."
"Okay, so I'm going to run it"
"And our test case passed."
"I'm not sure that this is a very good test case."
"Nice job. "
Thanks.
"Because it only tests..."
"The first column."
"So, I'm..."
"What do you want to work on next?"
"Well, I want to test this in each column."
"I'm gonna run the test and just make sure for my sanity and this will work in each column."
"And it looks like it does. Okay, so we've implemented vertical win. So let's now implement horizontal win."
"Nice job, no errors."
"Okay, so if we're going to do this the same way, then we want to just placemark to fill up the first row. "
"So... just this... like we did in the last one, and propagated across the columns."
"I like the way this is going."
"If we assert the equals, and we're going to make a horizontal win, and we want that to be true. "
"Okay, so now we can go back and make another method and we're gonna check for horizontal win."
Now...
"We're probably gonna make another Boolean but we're doing your basic for loop again."
Okay.
Um...
"And we're just gonna make another one of these."
"Okay, got my brackets, right? Yeah."
"And then make that j."
"I think we're on the right track."
"Uh huh, columns, now..."
"Since I did that one backwards, we can just do this one regular if the board at i j equals the current player mark."
"Okay, um, I won't do anymore."
"Okay, so we've got our if statement."
"Now we need to do the same thing, for you just make a Boolean."
"Now if we get through a row..."
"And we don't find one, then win is false, since we didn't have a row with entire one players mark. Now, if we go through and we find that this is not true."
And...
"When this false can break because..."
The-
"Say again?"
"I see."
"Oh, I thought you said disagree. Okay."
"Um... now..."
Else...
"This is a bad way to do this."
"So the then once we go through, if win is true, and we can just return true."
"Otherwise, we return. Okay."
"Should we test this?"
"I think we have unecessary-"
Sure.
"I think we have some unnecessary stuff too."
"Okay, well, let's just test it and then we'll refactor it."
"Okay, so let's test."
"Okay, we pass the test. Yes. Now I'm going to make sure that it's the same for the rows?"
Great.
"Okay. Good. Okay. Now we can do some refactoring here."
"With horizontal win."
"If we go through if we just make this true."
Oops.
"And then we go through finally in the center markets false if it is our mark, and this is true. Actually, is this even necessary? I don't think so."
Um.
"If win is still true after you go through a row, then we can return true."
Otherwise...
Um....
"This... looks unnecessary too."
"Mistake on line 84."
Yeah.
"I think I may have... deleted it, we'll see. Um..."
"What do you think now?"
"Let's run the test."
"Now- Okay, I broke it. Um, all right."
"Okay, so..."
"Do you need any help?"
Sure.
"Awesome. Can I drive?"
Yes.
"So then I can move this maybe."
Okay.
"How about this?"
"Um, yeah, I guess that'll work."
"I'm not sure."
"Well, let's run the test. How about that and see..."
"How that works. Okay, in the interest of time, I think we should move on."
"I think I'll reflect what we did here... across to this one. "
"And say, We don't need this else condition and..."
"I think that should work."
"Okay, what do you want to do next?"
"Okay, well, I want to make sure that those tests run. Okay, so let's we've accomplished the first two user stories. Now we need to think about diagonally so as a user, I want to be able to win by placing three marks on a diagonal row because this is a valid win."
"Um, so let's do a diagonal."
"So I'll make another test case."
Um...
"Diagonal win, and then we're gonna place a mark."
"But we'll start at zero zero."
"We basically just need to, like, add one each, right?"
"And then two two."
"Keep the naming convention going..."
"Okay, do you agree with that test case?"
"I like the way this is going. "
Okay.
"So... then we need to make the method for it."
Um...
"Now, if we wanna do a diagonal. I mean, we're still gonna have to loop through. There's probably a much faster way to do this, but-"
"I dunno."
"Okay, so..."
"Actually, maybe we can't do it like this."
"I can try if you need any help."
"Sure. You drive."
"Okay, great."
"Because we have to iterate diagonally, right? So we have to increase- One we have to increase both each time we go through the loop."
"Maybe we can just write something here."
Okay.
"I'm thinking."
"What if we could put this here?"
Okay.
"Does this make any sense to you?"
"Yeahhhh, but there's also the other diagonal."
"Oh, wait. Yeah."
Oh.
"I think we are missing code in this function."
"Okay. Well let me get rid of my loops."
"Um... yeah."
"So we basically have..."
Um...
"How do I wanna do this?"
"Um, it's gonna be zero zero, one one-"
"Hello, what's your name?"
Ryan.
"I'm buddy. It's nice to meet you."
"Do you want to get started?"
"Yes, let's get started."
"Which tests do you want to do first?"
"Let's see..."
"Let's work on..."
"Uh, the vertical column test"
"Okay, sounds good."
"Would you like to go first?"
"Uh, sure."
"Alright, what do you think we should start- start with?"
"User story one has us write a test for winning vertically."
"Okay, so how should we, how should we start? We need to make a test, um..."
"What are you thinking?"
"Oh, I was just looking at the other tests in here to see how we should make a test for a vertical column"
"We should call it at test as well."
"Sounds good."
"Vertical win..."
"I'm going to go ahead and write, um, the names for all the rest of them. So we have a good naming scheme."
"Okay, great."
"One two three, one two three four five six..."
Okay...
"So for number five..."
Um...
"Says I want to take turns with my opponent because I want to accommodate multiple players. So do we need to check to see like, check whose turn it is?"
"Or check if it's player one or player two's turn?"
"User story five is about making sure that the players take turns."
"Okay, so..."
Say...
"That look okay? Check player one term check player two turn."
Sure.
Sure.
"And then for number six-"
"Oh, we don't need a test for that."
Correct?
"I can help if you need me to"
"Sure, what should we- what should we do next?"
"I can try doing user story one."
"Alright. What do you- What are you thinking for it?"
"Can I drive?"
Sure.
"Maybe if I add some code here."
"I wonder..."
"Let me see."
"Would this help?"
"Does that work for all of the vertical win cases?"
"I'm not certain."
"That's all I can think of."
"Alright, I need some more help. Not sure, uh, what to do next."
"I can do some more if you'd like."
"Sure. What else can we- can we do?"
"Do you want to do another test?"
"Uh, well it looks like the code might not work for this test."
"We need to implement vertical win."
Okay.
"And should we do that in Tic Tac Toe game or Tic Tac Toe game tests?"
"We can do that in tic tac toe game."
Okay.
"Would you like me to try?"
Sure.
"Let me see."
"If we add a function here..."
Hm.
"Is this correct?"
"Let me see what else I can do."
"If I write some code here, um..."
"Does this help?"
"Sure. So it looks like it's resolved our problem over here, um, except it's undefined."
"Actually, I'm a bit stuck."
"Mind if you take over?"
"Sure, I'll take over."
Okay.
"So it looks like we should return who the winner is. And we don't have anything for that yet."
"Oh, what are you thinking here?"
"So I'm not super familiar with Java."
"It's been a long time since I've worked on anything with it, but it looks like we need to make a variable to return who the winner is."
"And so I was just looking to see where the best place to do that would be. If it should be when we start the game or when we initialize the board or..."
"Um, somewhere else."
"So what do you think? Should we put it up here? Where the game- when the game starts?"
Sure.
"Okay, so we can say..."
"So how would you do this in Java, we want to make it a Boolean. So..."
"If there is a winner, it's true and the game is over. If there's not a winner, it's false and the game continues."
"So I'm thinking right here we should write, uh..."
"Like, initialize the variable."
"Sounds good with me."
"Okay, can you help me do that in Java?"
"I'm not sure."
Okay.
"Should I- should I look up how to do it?"
Sure.
"Okay, so we'll start off as false."
"Let me know if you need my help. "
Okay.
"Does that look alright? Should I be able to use that everywhere?"
"I think there is a mistake on line 15. "
"I think so too."
"Should I should I move this somewhere else? Or do I need to edit this line?"
"I think there is unnecessary code on line 15."
"How about that, is that better?"
"I'm not sure, we can test it."
"Okay, we can test it. Should we test it from from here? run this."
"Okay, so..."
"Oops one error."
"Well, this-"
Okay.
"I see. I get it now."
"Do you need me to drive?"
" Sure. I think I understand better now what we're doing."
"Okay, great."
"But you can- you can drive and I'll see if we're thinking the same thing"
"Let me see."
"Maybe if I add these lines here..."
"I am thinking."
"How about this?"
"Yeah, so if we change this..."
"Now we can say, um..."
"We can check the columns to see- see which player has played."
"And see if any of them have all- every spot in a column filled and then we can return the winner depending on who- who wins"
"Or I guess- I guess winner will be. If either player wins, um-"
"You return that there is a winner."
"So return winner there, I'd say."
"We check..."
"What does this code do?"
"So this one looks from..."
"Uh, the size of the board, I think?"
"It looks through every-"
"Every square on the board, to see where all the players have played."
"Is that correct?"
"Okay, I see."
"So we want to check vertically if there's-"
"If all- if the whole column has been filled up by a player, then we'll return that there is a winner, and that would pass our test."
"Test is looking for true."
"Are there other ways we could do this?"
"Oh, um, I'm sure there are other ways."
"And we're still missing some here."
"We need to add some code on line 67"
"Yeah, so what should we check for on line 67?"
"We should check..."
"Winner equals true."
Okay.
Alright.
"Okay, and what else? Um, we should also fill in some code on line 70"
"I think we need to put more code in line 70. Yaw."
Okay.
"So should this also be winner equals true?"
"I don't think so."
"Uh, should it deal with winner at all?"
"I don't know."
"You can add an if statement on line 70."
Okay.
"So if..."
"Say if something, then winner equals true"
Else...
"Does that look right? And we should make a case here."
"I'm not sure about what we're doing here."
"Okay. So should I leave this here on line 67? Or...?"
Sure
Okay.
"Am I missing something here?"
Yes.
"Okay, what do you think we should add?"
"I can drive if you'd like."
"Okay, go for it."
"I'll need to comment out this code."
Okay.
"Let me see."
"What if I added this if statement?"
"I wonder if this works."
"So do we still need an else statement here, um, or not?"
"I don't think so."
Okay.
"Wanna try this code?"
"We can test it."
"Sure, we can test it."
"So we still got an error."
"Oops, an error."
"I'll go ahead and take this out since we decided we don't need that."
"I think we are missing some code."
"Should I have not taken that out?"
"I'm not sure."
"There needs to be more code between lines 72 and 73."
Okay.
"Can you point me in the right direction here? What else should we be adding?"
"Between line 74 and 75 add an if statement."
"Okay, does that look like I've started with the right thing?"
"Do you need me to drive? "
Sure.
"Okay, how about this? Let's see."
"Would this help?"
Um...
"I'm not sure what that does."
"I think we're close."
Okay.
"What else are we missing here? We need to return..."
"Do we need to say else?"
"-in line 79."
"Can you say that again?"
79?
"Return false in line 79."
"Ah, okay."
"Alright, I think that that's it."
"Does this work?"
"Oops, what's wrong?"
"So here are tests is expecting that if somebody plays on..."
"Um, zero zero, one zero, and two zero, that it will return true and ours returned false."
"Or did I say that backwards?"
Um...
"Okay, what else do you think we should do here?"
"We should write a test case for a horizontal win. "
Okay.
"That's gonna be pretty similar to this one, then."
"Except instead of that we can do..."
Okay.
"Okay, I see."
"Okay, how does that look? What else should we-"
"What does this code do?"
"The one we just placed would be the same as a vertical win."
"So we need to adjust it to be for a horizontal win instead."
"This looks promising. Let's test it."
Okay.
"Darn, one error."
"Okay, we can do something similar for diagonal when as well."
"You can do zero zero, one one, two two, that I can see."
"What are you thinking."
"So we can do the same thing... uh, not the same thing but-"
"We need to make another..."
"Something else here for a diagonal win"
"Okay, so..."
"Okay, I see"
"And then this one we can just check, um, it."
"So far as i know we can just check i comma or i i?"
"This looks promising."
"I guess we'll change this."
"There seems to be an error on line 103."
"So I think I'm going to take out the for loop here. I think we can do this a different way."
Um...
"Okay, sounds good to me."
"Okay, I see what you're doing here."
"Okay. And we should also check-"
"Sorry, go ahead."
"What does this code do?"
"So it checks zero zero, um, one one, and two, two, to see if the current player has, uh, played on all three of those squares. If it returns true, then that means somebody has won. If it returns false, then that means-"
"Doesn't necessarily mean nobody has won, but nobody won on that diagonal."
"So that's just checking the diagonal from like top left to bottom right, we should also probably check the other diagonal."
"That sounds good to me."
"They'll say diagonal left, right. And then it could also do diagonal right left."
"This is gonna be..."
"Two zero, one one, zero two."
"So do the same thing except we'll do..."
"Um, two zero, one one, and zero two."
"I can drive if you'd like."
"Um...Let me change this real quick and then..."
"I think that's correct."
"Okay, what what should we do next? What do you want to do?"
"Oops, I error."
"Yeah, so we need to fix the errors from these other two."
"We should fix vertical win."
"Yeah, okay. I have a better a better idea what we're doing now. So"
"So we can check..."
"I'm just gonna start from scratch here if that's okay."
"The mistake is on line 70."
"Okay, so on line 70..."
"What do you think we should do here on line 70?"
"It should say if board j i not equals current player mark."
"It should be j i?"
"Okay, do you want to test that out"
"This looks good to me. Sure."
"Okay, so we got no errors..."
